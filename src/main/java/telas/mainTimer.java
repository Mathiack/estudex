package telas;

import com.mycompany.estudex.index;
import com.mycompany.estudex.mainIndex;
import dialogos.addCronometroLivreDlg;
import dialogos.addPomodoroDlg;
import dialogos.addTemporizadorDlg;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import org.json.JSONArray;
import org.json.JSONObject;
import java.io.*;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

public class mainTimer extends javax.swing.JFrame {

    private DefaultTableModel tabelaModel;
    private static final String JSON_PATH = "data/timer.json";

    public mainTimer() {
        initComponents();
        setTitle("Timer");

        setResizable(false);

        tabelaModel = new DefaultTableModel(new Object[]{"Título"}, 0);
        buttonList.setModel(tabelaModel);
        //carregarTimersNaTabela();

        //quando fechar a janela, volta para o index
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                new index().setVisible(true);
            }
        });

        //menu de contexto de botão direito
        buttonList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = buttonList.getSelectedRow();
                if (SwingUtilities.isLeftMouseButton(e) && row != -1) {

                } else if (SwingUtilities.isRightMouseButton(e) && row != -1) {
                    mostrarMenuContexto(e, row);
                }
            }
        });

        tabelaModel = new DefaultTableModel(new Object[]{"Título", "Tipo", "Duração"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // impede edição em todas as células
            }
        };

        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), "recarregarTabela");

        getRootPane().getActionMap().put("recarregarTabela", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                atualizarTabelaTimers();
            }
        });

        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke("alt P"), "abrirPomodoro");

        getRootPane().getActionMap().put("abrirPomodoro", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addPomodoroDlg dlgPomodoro = new addPomodoroDlg(mainTimer.this);
                dlgPomodoro.setVisible(true);
            }
        });

        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke("alt T"), "abrirTemporizador");

        getRootPane().getActionMap().put("abrirTemporizador", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addTemporizadorDlg dlgTemporizador = new addTemporizadorDlg();
                dlgTemporizador.setVisible(true);
            }
        });

        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke("alt C"), "abrirCronometro");

        getRootPane().getActionMap().put("abrirCronometro", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addCronometroLivreDlg dlgCronometro = new addCronometroLivreDlg();
                dlgCronometro.setVisible(true);
            }
        });

        atualizarTabelaTimers(); //atualiza a tabela quando entra
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        painelLateral = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        buttonList = new javax.swing.JTable();
        painelCentral = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        addTimerMenuBtn = new javax.swing.JMenu();
        novoPomodoroMenuBtn = new javax.swing.JMenuItem();
        cronLivreMenuBtn = new javax.swing.JMenuItem();
        temporizadorMenuBtn = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1400, 800));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane1.setViewportView(buttonList);

        javax.swing.GroupLayout painelLateralLayout = new javax.swing.GroupLayout(painelLateral);
        painelLateral.setLayout(painelLateralLayout);
        painelLateralLayout.setHorizontalGroup(
            painelLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLateralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelLateralLayout.setVerticalGroup(
            painelLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLateralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(painelLateral, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 780));

        painelCentral.setLayout(new javax.swing.BoxLayout(painelCentral, javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(painelCentral, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 120, 880, 520));

        addTimerMenuBtn.setText("Timer");

        novoPomodoroMenuBtn.setText("Novo Pomodoro");
        novoPomodoroMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoPomodoroMenuBtnActionPerformed(evt);
            }
        });
        addTimerMenuBtn.add(novoPomodoroMenuBtn);

        cronLivreMenuBtn.setText("Cronômetro Livre");
        cronLivreMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cronLivreMenuBtnActionPerformed(evt);
            }
        });
        addTimerMenuBtn.add(cronLivreMenuBtn);

        temporizadorMenuBtn.setText("Temporizador");
        temporizadorMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporizadorMenuBtnActionPerformed(evt);
            }
        });
        addTimerMenuBtn.add(temporizadorMenuBtn);

        jMenuBar1.add(addTimerMenuBtn);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void novoPomodoroMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoPomodoroMenuBtnActionPerformed
        addPomodoroDlg addPomodoroDlg = new addPomodoroDlg(this);
        addPomodoroDlg.setVisible(true);
    }//GEN-LAST:event_novoPomodoroMenuBtnActionPerformed

    private void cronLivreMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cronLivreMenuBtnActionPerformed
        addCronometroLivreDlg cronLivreDlg = new addCronometroLivreDlg();
        cronLivreDlg.setVisible(true);
    }//GEN-LAST:event_cronLivreMenuBtnActionPerformed

    private void temporizadorMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporizadorMenuBtnActionPerformed
        addTemporizadorDlg temporizadorDlg = new addTemporizadorDlg();
        temporizadorDlg.setVisible(true);
    }//GEN-LAST:event_temporizadorMenuBtnActionPerformed

    // coisas do pomodoro
    public void adicionarPomodoro(String titulo, int trabalhoMin, int descansoMin) {
        JSONObject obj = new JSONObject();
        obj.put("titulo", titulo);
        obj.put("tipo", "pomodoro");
        obj.put("trabalho", trabalhoMin);
        obj.put("descanso", descansoMin);

        tabelaModel.addRow(new Object[]{
            titulo,
            "Pomodoro",
            trabalhoMin + " / " + descansoMin + " min"
        });

        salvarTimer(obj);
    }

    // salva no JSON
    private void salvarTimer(JSONObject timer) {
        JSONArray lista = carregarTimersJson();
        lista.put(timer);

        try (FileWriter file = new FileWriter(JSON_PATH)) {
            file.write(lista.toString(4));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private JSONArray carregarTimersJson() {
        try (BufferedReader reader = new BufferedReader(new FileReader(JSON_PATH))) {
            StringBuilder content = new StringBuilder();
            String linha;
            while ((linha = reader.readLine()) != null) {
                content.append(linha);
            }
            return new JSONArray(content.toString());
        } catch (IOException e) {
            return new JSONArray(); // novo arquivo se não existir
        }
    }

    // bota na tabela
    private void carregarTimersSalvos() {
        JSONArray lista = carregarTimersJson();
        for (int i = 0; i < lista.length(); i++) {
            JSONObject obj = lista.getJSONObject(i);
            String titulo = obj.getString("titulo");
            String tipo = obj.getString("tipo");

            if (tipo.equals("pomodoro")) {
                int trabalho = obj.getInt("trabalho");
                int descanso = obj.getInt("descanso");
                tabelaModel.addRow(new Object[]{titulo, "Pomodoro", trabalho + " / " + descanso + " min"});
            } else {

            }
        }
    }

    public void atualizarTabelaTimers() {
        tabelaModel.setRowCount(0); // limpa a tabela
        carregarTimersSalvos();     // recarrega do JSON
    }

    private void mostrarMenuContexto(MouseEvent e, int row) {
        JPopupMenu menu = new JPopupMenu();

        JMenuItem editar = new JMenuItem("Editar");
        //editar.addActionListener(ae -> editarLivro(row));
        menu.add(editar);

        JMenuItem excluir = new JMenuItem("Excluir");
        //excluir.addActionListener(ae -> excluirLivro(row));
        menu.add(excluir);

        menu.show(e.getComponent(), e.getX(), e.getY());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainTimer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu addTimerMenuBtn;
    private javax.swing.JTable buttonList;
    private javax.swing.JMenuItem cronLivreMenuBtn;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem novoPomodoroMenuBtn;
    private javax.swing.JPanel painelCentral;
    private javax.swing.JPanel painelLateral;
    private javax.swing.JMenuItem temporizadorMenuBtn;
    // End of variables declaration//GEN-END:variables
}
