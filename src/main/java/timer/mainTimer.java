package timer;

import com.mycompany.estudex.index;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import org.json.JSONArray;
import org.json.JSONObject;
import java.io.*;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import biblioteca.mainBiblioteca;
import telas.mainDocumento;
import telas.mainNotas;
import dialogos.dlgSobre;
import telas.mainTarefas;

public class mainTimer extends javax.swing.JFrame {

    private DefaultTableModel tabelaModel;
    private static final String JSON_PATH = "data/timer.json";

    public mainTimer() {
        initComponents();
        setTitle("Timer");
        setResizable(false);

        // LEMBRAR DE BOTAR O NEGÓCIO PARA ABRIR O INDEX DE VOLTA QUANDO FECHAR 
        //menu de contexto de botão direito
        buttonList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = buttonList.getSelectedRow();
                if (SwingUtilities.isLeftMouseButton(e) && row != -1) {

                } else if (SwingUtilities.isRightMouseButton(e) && row != -1) {
                    mostrarMenuContexto(e, row);
                }
            }
        });

        tabelaModel = new DefaultTableModel(new Object[]{"Título"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        buttonList.setModel(tabelaModel);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 700));
        buttonList.setPreferredScrollableViewportSize(new java.awt.Dimension(250, 700));
        buttonList.setFillsViewportHeight(true);

        atualizarTabelaTimers(); //atualiza a tabela quando entra

        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), "recarregarTabela");

        getRootPane().getActionMap().put("recarregarTabela", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                atualizarTabelaTimers();
            }
        });

        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke("alt P"), "abrirPomodoro");

        getRootPane().getActionMap().put("abrirPomodoro", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addPomodoroDlg dlgPomodoro = new addPomodoroDlg(mainTimer.this);
                dlgPomodoro.setVisible(true);
            }
        });

        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke("alt T"), "abrirTemporizador");

        getRootPane().getActionMap().put("abrirTemporizador", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addTemporizadorDlg dlgTemporizador = new addTemporizadorDlg();
                dlgTemporizador.setVisible(true);
            }
        });

        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke("alt C"), "abrirCronometro");

        getRootPane().getActionMap().put("abrirCronometro", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addCronometroLivreDlg dlgCronometro = new addCronometroLivreDlg();
                dlgCronometro.setVisible(true);
            }
        });

        //icones do botão
        homeBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 24));
        homeBtn.setText("\ue80f");

        bibliotecaBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 24));
        bibliotecaBtn.setText("\ue8f1");

        timerBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 24)); // NOI18N
        timerBtn.setText("\ue823");

        documentsBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 24)); // NOI18N
        documentsBtn.setText("\ue7c3");

        tarefasBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 24)); // NOI18N
        tarefasBtn.setText("\ue71d");

        notasBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 24)); // NOI18N
        notasBtn.setText("\ue70b");

        sobreBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 24)); // NOI18N
        sobreBtn.setText("\ue946");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        painelCentral = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        buttonList = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        documentsBtn = new javax.swing.JButton();
        tarefasBtn = new javax.swing.JButton();
        notasBtn = new javax.swing.JButton();
        bibliotecaBtn = new javax.swing.JButton();
        timerBtn = new javax.swing.JButton();
        homeBtn = new javax.swing.JButton();
        sobreBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        addTimerMenuBtn = new javax.swing.JMenu();
        novoPomodoroMenuBtn = new javax.swing.JMenuItem();
        cronLivreMenuBtn = new javax.swing.JMenuItem();
        temporizadorMenuBtn = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(54, 56, 58));
        setMinimumSize(new java.awt.Dimension(1400, 800));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        painelCentral.setBackground(new java.awt.Color(54, 56, 58));
        painelCentral.setLayout(new javax.swing.BoxLayout(painelCentral, javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(painelCentral, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, 880, 520));

        buttonList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        buttonList.setPreferredSize(new java.awt.Dimension(90, 80));
        jScrollPane1.setViewportView(buttonList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 250, 780));

        jPanel1.setForeground(new java.awt.Color(48, 52, 63));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        documentsBtn.setBackground(new java.awt.Color(60, 63, 65));
        documentsBtn.setBorder(null);
        documentsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentsBtnActionPerformed(evt);
            }
        });
        jPanel1.add(documentsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 50, 50));

        tarefasBtn.setBackground(new java.awt.Color(60, 63, 65));
        tarefasBtn.setBorder(null);
        tarefasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tarefasBtnActionPerformed(evt);
            }
        });
        jPanel1.add(tarefasBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 50, 50));

        notasBtn.setBackground(new java.awt.Color(60, 63, 65));
        notasBtn.setBorder(null);
        notasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notasBtnActionPerformed(evt);
            }
        });
        jPanel1.add(notasBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 50, 50));

        bibliotecaBtn.setBackground(new java.awt.Color(60, 63, 65));
        bibliotecaBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 12)); // NOI18N
        bibliotecaBtn.setBorder(null);
        bibliotecaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bibliotecaBtnActionPerformed(evt);
            }
        });
        jPanel1.add(bibliotecaBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 50, 50));

        timerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerBtnActionPerformed(evt);
            }
        });
        jPanel1.add(timerBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 50, 50));

        homeBtn.setBackground(new java.awt.Color(60, 63, 65));
        homeBtn.setBorder(null);
        homeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBtnActionPerformed(evt);
            }
        });
        jPanel1.add(homeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 50, 50));

        sobreBtn.setBackground(new java.awt.Color(60, 63, 65));
        sobreBtn.setBorder(null);
        sobreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobreBtnActionPerformed(evt);
            }
        });
        jPanel1.add(sobreBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 710, 50, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 780));

        jPanel2.setBackground(new java.awt.Color(54, 56, 58));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 0, 1080, 780));

        addTimerMenuBtn.setText("\ue710");
        addTimerMenuBtn.setFont(new java.awt.Font("Segoe Fluent Icons", 0, 12)); // NOI18N

        novoPomodoroMenuBtn.setText("Novo Pomodoro");
        novoPomodoroMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoPomodoroMenuBtnActionPerformed(evt);
            }
        });
        addTimerMenuBtn.add(novoPomodoroMenuBtn);

        cronLivreMenuBtn.setText("Cronômetro Livre");
        cronLivreMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cronLivreMenuBtnActionPerformed(evt);
            }
        });
        addTimerMenuBtn.add(cronLivreMenuBtn);

        temporizadorMenuBtn.setText("Temporizador");
        temporizadorMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporizadorMenuBtnActionPerformed(evt);
            }
        });
        addTimerMenuBtn.add(temporizadorMenuBtn);

        jMenuBar1.add(addTimerMenuBtn);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void novoPomodoroMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoPomodoroMenuBtnActionPerformed
        addPomodoroDlg addPomodoroDlg = new addPomodoroDlg(this);
        addPomodoroDlg.setVisible(true);
    }//GEN-LAST:event_novoPomodoroMenuBtnActionPerformed

    private void cronLivreMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cronLivreMenuBtnActionPerformed
        addCronometroLivreDlg cronLivreDlg = new addCronometroLivreDlg();
        cronLivreDlg.setVisible(true);
    }//GEN-LAST:event_cronLivreMenuBtnActionPerformed

    private void temporizadorMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporizadorMenuBtnActionPerformed
        addTemporizadorDlg temporizadorDlg = new addTemporizadorDlg();
        temporizadorDlg.setVisible(true);
    }//GEN-LAST:event_temporizadorMenuBtnActionPerformed

    private void sobreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobreBtnActionPerformed
        dlgSobre s = new dlgSobre();
        s.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_sobreBtnActionPerformed

    private void homeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBtnActionPerformed
        index i = new index();
        i.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_homeBtnActionPerformed

    private void timerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerBtnActionPerformed
        mainTimer tim = new mainTimer();
        tim.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_timerBtnActionPerformed

    private void bibliotecaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bibliotecaBtnActionPerformed
        mainBiblioteca b = new mainBiblioteca();
        b.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bibliotecaBtnActionPerformed

    private void notasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notasBtnActionPerformed
        mainNotas n = new mainNotas();
        n.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_notasBtnActionPerformed

    private void tarefasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tarefasBtnActionPerformed
        mainTarefas tar = new mainTarefas();
        tar.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_tarefasBtnActionPerformed

    private void documentsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentsBtnActionPerformed
        mainDocumento d = new mainDocumento();
        d.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_documentsBtnActionPerformed

    // coisas do pomodoro
    public void adicionarPomodoro(String titulo, int trabalhoMin, int descansoMin) {
        JSONObject obj = new JSONObject();
        obj.put("titulo", titulo);
        obj.put("tipo", "pomodoro");
        obj.put("trabalho", trabalhoMin);
        obj.put("descanso", descansoMin);
        salvarTimer(obj);
    }

    // salva no JSON
    private void salvarTimer(JSONObject timer) {
        JSONArray lista = carregarTimersJson();
        lista.put(timer);

        try (FileWriter file = new FileWriter(JSON_PATH)) {
            file.write(lista.toString(4));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private JSONArray carregarTimersJson() {
        try (BufferedReader reader = new BufferedReader(new FileReader(JSON_PATH))) {
            StringBuilder content = new StringBuilder();
            String linha;
            while ((linha = reader.readLine()) != null) {
                content.append(linha);
            }
            return new JSONArray(content.toString());
        } catch (IOException e) {
            return new JSONArray();
        }
    }

    // bota na tabela
    private void carregarTimersSalvos() {
        JSONArray lista = carregarTimersJson();
        for (int i = 0; i < lista.length(); i++) {
            JSONObject obj = lista.getJSONObject(i);
            String titulo = obj.optString("titulo");
            String tipo = obj.optString("tipo");

            if (tipo.equals("pomodoro")) {
                tabelaModel.addRow(new Object[]{
                    "P - " + titulo
                });
            }
            // depois vai ter mais tipos
        }
        System.out.println("Timers carregados: " + tabelaModel.getRowCount());
    }

    public void atualizarTabelaTimers() {
        tabelaModel.setRowCount(0); // limpa a tabela
        carregarTimersSalvos();     // recarrega do JSON
    }

    private void excluirTimer(int row) {
        JSONArray lista = carregarTimersJson();
        if (row >= 0 && row < lista.length()) {
            lista.remove(row);
            try (FileWriter file = new FileWriter(JSON_PATH)) {
                file.write(lista.toString(4));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            atualizarTabelaTimers();
        }
    }

    private void editarTimer(int row) {
        JSONArray lista = carregarTimersJson();
        if (row >= 0 && row < lista.length()) {
            JSONObject timer = lista.getJSONObject(row);
            String tipo = timer.optString("tipo");

            if ("pomodoro".equals(tipo)) {
                editPomodoroDlg dlg = new editPomodoroDlg(this, row, timer); // Abre com os dados
                dlg.setVisible(true);
            }
        }
    }

    public void atualizarTimerEditado(int index, JSONObject novoTimer) {
        JSONArray lista = carregarTimersJson();
        if (index >= 0 && index < lista.length()) {
            lista.put(index, novoTimer);
            try (FileWriter file = new FileWriter(JSON_PATH)) {
                file.write(lista.toString(4));
            } catch (IOException e) {
                e.printStackTrace();
            }
            atualizarTabelaTimers();
        }
    }

    private void mostrarMenuContexto(MouseEvent e, int row) {
        JPopupMenu menu = new JPopupMenu();

        JMenuItem editar = new JMenuItem("Editar");
        editar.addActionListener(ae -> editarTimer(row));
        menu.add(editar);

        JMenuItem excluir = new JMenuItem("Excluir");
        excluir.addActionListener(ae -> excluirTimer(row));
        menu.add(excluir);

        menu.show(e.getComponent(), e.getX(), e.getY());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainTimer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu addTimerMenuBtn;
    private javax.swing.JButton bibliotecaBtn;
    private javax.swing.JTable buttonList;
    private javax.swing.JMenuItem cronLivreMenuBtn;
    private javax.swing.JButton documentsBtn;
    private javax.swing.JButton homeBtn;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton notasBtn;
    private javax.swing.JMenuItem novoPomodoroMenuBtn;
    private javax.swing.JPanel painelCentral;
    private javax.swing.JButton sobreBtn;
    private javax.swing.JButton tarefasBtn;
    private javax.swing.JMenuItem temporizadorMenuBtn;
    private javax.swing.JButton timerBtn;
    // End of variables declaration//GEN-END:variables
}
